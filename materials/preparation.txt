
* Как проходит процесс найма в Яндекс (и советы, как повысить шансы на успех + много материалов для подготовки):
https://yandex.ru/jobs/pages/dev_interview

* Примеры задач, которые могут встретиться на интервью (6 задачек подходящие для Python, С++, С#, Java, JavaScript, Kotlin, Swift, Objective-C):
https://contest.yandex.ru/contest/8458/enter/

* Пост на Хабре об алгоритмической секции с кодом:
https://m.habr.com/ru/company/yandex/blog/449890/

* В этих видео мы разбираем решение алгоритмических задач:
https://youtu.be/0yxjWwoZtLw
https://youtu.be/zU-LndSG5RE

* Как проходят архитектурные секции собеседования в Яндексе: практика дизайна распределённых систем:
https://habr.com/ru/company/yandex/blog/564132/

* Числа, которые точно нужно знать:
https://github.com/donnemartin/system-design-primer/blob/master/README.md#appendix

* Практикум - подготовка к алгоритмической секции
https://practicum.yandex.ru/algorithms-interview/

* FAQ с ответами на часто задаваемые вопросы:
https://yandex.ru/jobs/faq

* Код:
https://leetcode.com/problemset/all/
https://leetcode.com/problemset/algorithms/
https://leetcode.com/problems/reverse-linked-list/solution/
https://www.geeksforgeeks.org/reverse-a-linked-list/
https://www.interviewbit.com/practice/

* Материалы для подготовки:
- Примеры наших задач:
    https://m.habrahabr.ru/company/yandex/blog/337690/
    https://m.habrahabr.ru/company/yandex/blog/340784/

- Оценка сложности:
https://habr.com/ru/post/188010/

- Подборка по алгоритмам:
https://github.com/tayllan/awesome-algorithms
https://m.habr.com/ru/company/yandex/blog/449890/
https://habr.com/ru/post/78728/

- Алгоритмы, которые чаще всего бывают в задачках:
    – сортировки (например, bubble sort или quicksort)
    – разворота одно/двусвязного списка
    – разворота строки
    – обхода дерева

---

First, it is highly recommended to start reading the following book (engineering sections):
http://www.crackingthecodinginterview.com/contents.html

What to revise:
•	complexity of sorting algorithms
•	after solving every issue algorithm’s time complexity is usually discussed
•	DFS/BFS are frequently asked during coding interviews
•	solving some Dynamic programming problems would be useful because they are less intuitive than for example Greedy
•	Questions similar to climbing stairs: https://leetcode.com/problems/climbing-stairs/description/
